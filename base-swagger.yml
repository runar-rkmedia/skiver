b/asePath: /api
consumes:
- application/json
- text/vnd.yaml
- application/toml
components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      name: token
security:
  - cookieAuth: []
definitions:
  LogoutResponse:
    type: object
    required:
      - ok
    properties:
      ok:
        type: boolean
  ProjectInput:
    type: object
    required:
      - title
      - short_name
    properties:
      title:
        type: string
        minLength: 1
        maxLength: 400
      short_name:
        type: string
        minLength: 1
        maxLength: 20
      description:
        type: string
        minLength: 1
        maxLength: 8000
  TranslationInput:
    type: object
    required:
      - category_id
      - key
    properties:
      category_id:
        type: string
        minLength: 3
        maxLength: 100
      key:
        type: string
        pattern: ^[^\s]*$
        minLength: 1
        maxLength: 400
      title:
        type: string
        minLength: 1
        maxLength: 400
      description:
        type: string
        minLength: 1
        maxLength: 8000
      variables:
        type: object
        description: "key/value type. The value can be any type, but the key must a string."
        additionalProperties:
          type: object
        
  OrganizationInput:
    type: object
    required:
      - title
    properties:
      title:
        type: string
        minLength: 3
        maxLength: 300
  JoinInput:
    allOf:
      - $ref: '#/definitions/LoginInput'
  LocaleInput:
    type: object
    required: 
      - iso639_1
      - iso639_2
      - iso639_3
      - ietf_tag
      - title
    properties:
      title:
        type: string
        minLength: 3
        maxLength: 300
      iso639_1:
        type: string
        minLength: 2
        maxLength: 2
      iso639_2:
        type: string
        minLength: 3
        maxLength: 3
      iso639_3:
        type: string
        minLength: 3
        maxLength: 3
      ietf_tag:
        type: string
        description: List of other Locales in preferred order for fallbacks
        minLength: 2
        maxLength: 12


  TranslationValueInput:
    properties:
      translation_id:
        maxLength: 100
        minLength: 1
        type: string
      locale_id:
        maxLength: 100
        minLength: 1
        type: string
      value:
        maxLength: 8000
        minLength: 0
        type: string
      context:
        type: object
        additionalProperties:
          type: string
    type: object
    required:
      - translation_id
      - locale_id
      - value
  UpdateTranslationValueInput:
    properties:
      value:
        maxLength: 8000
        minLength: 0
        type: string
    type: object
    required:
      - value
  ReportMissingInput:
    type: object
    additionalProperties:
      type: string
  ImportInput:
    type: object
    additionalProperties: true
  CategoryInput:
    properties:
      key:
        maxLength: 100
        minLength: 1
        pattern: ^[^\s]*$
        type: string
      project_id:
        maxLength: 100
        minLength: 1
        type: string
      title:
        maxLength: 400
        minLength: 3
        type: string
      description:
        maxLength: 8000
        minLength: 3
        type: string
    type: object
    required:
      - key
      - project_id
      - title
  LoginInput:
    properties:
      password:
        maxLength: 400
        minLength: 3
        type: string
      username:
        example: abc123
        maxLength: 100
        minLength: 3
        pattern: ^[^\s]*$
        type: string
    type: object
    required:
      - username
      - password
host: localhost:8756
basePath: /api/
schemes:
  - http
info:
  description: >
    Api fo Skiver-api.
    <a href="https://insomnia.rest/run/?label=&uri=http://localhost:8756/api/swagger.yml" target="_blank"><img src="https://insomnia.rest/images/run.svg" alt="Run in Insomnia"></a>

    # About formatting

    This api produces output in json, yaml and toml. Every api-route takes parameters for controlling which content-type should be produced.

    In General, you can control this with these parameters:

      - `Accept`-header
      - Appending `.json`/`.yaml`/`.toml` to the path (not all routes supports this.)
      - `out_format`-query-parameter
      - `Content-Type`-header

  license:
    name: MIT
    url: http://opensource.org/licenses/MIT
  title: Skiver API.
  version: 0.0.1
paths:
  /import/{kind}/{project}/{locale}:
    post: 
      tags:
        - import
      summary: Import translations
      operationId: importTranslations
      parameters:
        - in: path
          name: kind
          type: string
          enum:
            - i18n
            - auto
          required: true
          description: >
            The format of the imported object.

            If set to auto, the server will attempt to find the format for you.
        - in: query
          name: dry
          type: boolean
          description: >
            If set, a dry-run will occur, and the result is returned.
        - in: path
          name: project
          type: string
          required: true
          description: >
            The parameter can be any of the Project's ID or ShortName.
        - in: path
          name: locale
          type: string
          required: true
          description: >
            The parameter can be any of the Locale's ID, iso639_1, iso639_2, iso639_3, or ietf_tag.
        - in: body
          name: ImportInput
          schema:
            $ref: '#/definitions/ImportInput'
      responses:
        "200":
          schema:
            type: object
        "500":
          $ref: '#/responses/apiError'
  /missing/{locale}/{project}:
    post: 
      tags:
        - translation
      summary: Missing translations reported by users
      operationId: reportMissing
      parameters:
        - in: path
          name: project
          type: string
          required: true
          description: >
            The parameter can be any of the Project's ID or ShortName.
        - in: path
          name: locale
          type: string
          required: true
          description: >
            The parameter can be any of the Locale's ID, iso639_1, iso639_2, iso639_3, or ietf_tag.
        - in: body
          name: ReportMissingInput
          schema:
            $ref: '#/definitions/ReportMissingInput'
      responses:
        "200":
          schema:
            type: object
        "500":
          $ref: '#/responses/apiError'
  /export/:
    get:
      tags:
        - export
      summary: Returnes a snapshot of the set of translations.
      description: >
        For caching in browsers, proxy caching services etc. to work consistenly with parameters, the `?`-prefix for the query-parameters should be removed.
       
        Note that by default, output-maps are flattened when requesting only a single project/locale. Set the parameter `no_flatten` to override.

      operationId: getExport
      parameters:
        - in: query
          name: project
          required: false
          type: string
          description: >
            The parameter can be any of the Project's ID or ShortName.

            The short-alias for this parameter is: `p`
        - in: query
          name: format
          required: false
          type: string
          enum:
            - raw
            - i18n
          description: >
            Used to set the export-format.

            ### `i18n`

            The output is formatted to be i18n-compliant.
            
            ### `raw`

            The output is not converted, and all data is outputted.

            The short-alias for this parameter is: `f`
        - in: query
          name: no_flatten
          required: false
          type: boolean
          description: >
            Disables flattening of the outputet map
        - in: query
          name: locale_key
          type: string
          required: false
          description: >
            Used to set which key in output for the locale that should be used.
            
            The parameter can be any of the Locale's ID, iso639_1, iso639_2, iso639_3, or ietf_tag.

            The short-alias for this parameter is: `p`
        - in: query
          name: locale
          type: string
          required: false
          description: >
            The parameter can be any of the Locale's ID, iso639_1, iso639_2, iso639_3, or ietf_tag.

            By leaving out the parameters, all locales will be returned.
            
            The short-alias for this parameter is: `l`

            **Future: By setting `locale_id=auto`, the server will infer the locale from the browsers headers.**
            
      responses:
        "200":
          description: "key-value i18n-type response."
          schema:
            type: object
        "404":
          $ref: '#/responses/apiError'
        "500":
          $ref: '#/responses/apiError'

  /serverInfo/:
    get:
      summary: Information about the server
      operationId: getServerInfo
      responses:
        "200":
          $ref: '#/responses/serverInfo'
        "500":
          $ref: '#/responses/apiError'
      tags:
      - server
  /organization/:
    get:
      summary: List organizations
      operationId: getOrganizations
      responses:
        "200":
          $ref: '#/responses/OrganizationsResponse'
        "500":
          $ref: '#/responses/apiError'
      tags:
      - organization
    post:
      summary: Create a new organization
      operationId: createOrganization
      parameters:
      - in: body
        required: true
        name: OrganizationInput
        schema:
          $ref: '#/definitions/OrganizationInput'
      responses:
        "200":
          $ref: '#/responses/OrganizationResponse'
        "500":
          $ref: '#/responses/apiError'
      tags:
      - organization
  /join/{id}:
    get:
      summary: Check if a join-id is valid. 
      operationId: getOrgByJoinID
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: >
            The join-id.
      responses:
        "200":
          $ref: '#/responses/OrganizationResponse'
        "404":
          $ref: '#/responses/apiError'
        "500":
          $ref: '#/responses/apiError'
      tags:
      - organization
    post:
      summary: Join organization
      operationId: joinOrganiztaion
      parameters:
      - in: path
        name: id
        type: string
        required: true
        description: >
          The join-id.
      - in: body
        required: true
        name: JoinInput
        schema:
          $ref: '#/definitions/JoinInput'
      responses:
        "200":
          $ref: '#/responses/JoinResponse'
        "500":
          $ref: '#/responses/apiError'
      tags:
      - organization
     
  /project/:
    get:
      summary: List projects
      operationId: getProject
      responses:
        "200":
          $ref: '#/responses/ProjectsResponse'
        "500":
          $ref: '#/responses/apiError'
      tags:
      - project
    post:
      summary: Create a new project
      operationId: createProject
      responses:
        "200":
          $ref: '#/responses/ProjectResponse'
        "500":
          $ref: '#/responses/apiError'
      tags:
      - project
  /category/:
    get:
      summary: List categories
      operationId: getcategory
      responses:
        "200":
          $ref: '#/responses/CategoryResponse'
        "500":
          $ref: '#/responses/apiError'
      tags:
      - category
    post:
      summary: Create a new category
      operationId: createCategory
      responses:
        "200":
          $ref: '#/responses/CategoryResponse'
        "500":
          $ref: '#/responses/apiError'
      tags:
      - category
  /translation/:
    get:
      summary: List translations
      operationId: getTranslation
      responses:
        "200":
          $ref: '#/responses/TranslationsResponse'
        "500":
          $ref: '#/responses/apiError'
      tags:
      - translation
    post:
      summary: Create a new translation
      operationId: createTranslation
      parameters:
      - in: body
        required: true
        name: TranslationInput
        schema:
          $ref: '#/definitions/TranslationInput'
      responses:
        "200":
          $ref: '#/responses/TranslationResponse'
        "500":
          $ref: '#/responses/apiError'
      tags:
      - translation
  /translationValue/:
    get:
      summary: List translation-values
      operationId: getTranslationValue
      responses:
        "200":
          $ref: '#/responses/TranslationValuesResponse'
        "500":
          $ref: '#/responses/apiError'
      tags:
      - translationValue
    # post:
    #   summary: Create a new translation-value for a locale
    #   operationId: createTranslationValue
    #   responses:
    #     "200":
    #       $ref: '#/responses/TranslationValueResponse'
    #     "500":
    #       $ref: '#/responses/apiError'
    #   tags:
    #   - translationValue
    put:
      summary: Update a new translation-value for a locale
      operationId: updateTranslationValue
      parameters:
      - in: body
        required: true
        name: UpdateTranslationValueInput
        schema:
          $ref: '#/definitions/UpdateTranslationValueInput'
        
      responses:
        "200":
          $ref: '#/responses/TranslationValueResponse'
        "500":
          $ref: '#/responses/apiError'
      tags:
      - translationValue
  /logout/:
    post:
      summary: Logout
      description: Logs out the current user.
      operationId: logout
      responses:
        "200":
          $ref: '#/responses/logoutResponse'
        "403":
          $ref: '#/responses/apiError'
        "500":
          $ref: '#/responses/apiError'
      tags:
      - auth

  /login/:
    get:
      summary: Get login-information
      description: "Returns information about the logged in user"
      operationId: getLogin
      responses:
        "200":
          $ref: '#/responses/loginResponse'
        "403":
          $ref: '#/responses/apiError'
        "500":
          $ref: '#/responses/apiError'
      tags:
      - auth
    post:
      security: []
      summary: Login
      description: Login to aquire a token, set in a cookie
      operationId: login
      parameters:
      - in: body
        required: true
        name: LoginInput
        schema:
          $ref: '#/definitions/LoginInput'
      responses:
        "200":
          $ref: '#/responses/loginResponse'
        "500":
          $ref: '#/responses/apiError'
      tags:
      - auth
  /locale/:
    post:
      summary: Create a locale
      operationId: listLocale
      parameters:
      - in: body
        required: true
        name: LocaleInput
        schema:
          $ref: '#/definitions/LocaleInput'
      responses:
        "200":
          $ref: '#/responses/localeResponse'
        "500":
          $ref: '#/responses/apiError'
      tags:
      - locale
    get:
      summary: List locales
      operationId: getLocale
      responses:
        "200":
          $ref: '#/responses/LocalesResponse'
        "500":
          $ref: '#/responses/apiError'
      tags:
      - locale
produces:
- application/json
- text/vnd.yaml
- application/toml
responses:
  apiError:
    description: "Consistant error-codes"
    schema:
      $ref: '#/definitions/ApiError'
  logoutResponse:
    schema:
      $ref: '#/definitions/LogoutResponse'
      type: object
  loginResponse:
    description: >
      On successful authentication, the token is set in a cookie named 'token'.

      For subsequent requests, you need to include the token.
      Browsers typically do this automatically (CORS).

      The token is by default valid for one hour.
    headers:
      Set-Cookie:
        type: string
        schema:
          type: string
          example: token=b6f7502c-2d39-4ddb-9890-84cb10d9bd13; Max-Age=3600; HttpOnly
    schema:
      $ref: '#/definitions/LoginResponse'
      type: object
  LocalesResponse:
    description: ""
    schema:
      items:
        $ref: '#/definitions/Locale'
      type: array
  ProjectResponse:
    description: ""
    schema:
      $ref: '#/definitions/Project'
      type: object
  ProjectsResponse:
    description: ""
    schema:
      items:
        $ref: '#/definitions/Project'
      type: array
  OrganizationResponse:
    description: ""
    schema:
      $ref: '#/definitions/Organization'
      type: object
  JoinResponse:
    schema:
      $ref: '#/definitions/LoginResponse'
      type: object
  OrganizationsResponse:
    description: ""
    schema:
      items:
        $ref: '#/definitions/Organization'
      type: array
  CategoryResponse:
    description: ""
    schema:
      $ref: '#/definitions/Category'
      type: object
  CategoriesResponse:
    description: ""
    schema:
      items:
        $ref: '#/definitions/Category'
      type: array
  TranslationResponse:
    description: ""
    schema:
      $ref: '#/definitions/Translation'
      type: object
  TranslationsResponse:
    description: ""
    schema:
      items:
        $ref: '#/definitions/Translation'
      type: array
  TranslationValueResponse:
    description: ""
    schema:
      $ref: '#/definitions/TranslationValue'
      type: object
  TranslationValuesResponse:
    description: ""
    schema:
      items:
        $ref: '#/definitions/TranslationValue'
      type: array
swagger: "2.0"
tags: 
  - name: project
    description: More or less like a folder
  - name: locale
    description: Language-like
  - name: translation
    description: The specific translation of some key
  - name: auth
    description: Authentication and Authorization
