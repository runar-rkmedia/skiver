// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DiffSnapshotInput diff snapshot input
//
// swagger:model DiffSnapshotInput
type DiffSnapshotInput struct {

	// a
	// Required: true
	A *SnapshotSelector `json:"a"`

	// b
	// Required: true
	B *SnapshotSelector `json:"b"`

	// format
	// Enum: [raw i18n typescript]
	Format string `json:"format,omitempty"`
}

// Validate validates this diff snapshot input
func (m *DiffSnapshotInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateA(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateB(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFormat(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DiffSnapshotInput) validateA(formats strfmt.Registry) error {

	if err := validate.Required("a", "body", m.A); err != nil {
		return err
	}

	if m.A != nil {
		if err := m.A.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("a")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("a")
			}
			return err
		}
	}

	return nil
}

func (m *DiffSnapshotInput) validateB(formats strfmt.Registry) error {

	if err := validate.Required("b", "body", m.B); err != nil {
		return err
	}

	if m.B != nil {
		if err := m.B.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("b")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("b")
			}
			return err
		}
	}

	return nil
}

var diffSnapshotInputTypeFormatPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["raw","i18n","typescript"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		diffSnapshotInputTypeFormatPropEnum = append(diffSnapshotInputTypeFormatPropEnum, v)
	}
}

const (

	// DiffSnapshotInputFormatRaw captures enum value "raw"
	DiffSnapshotInputFormatRaw string = "raw"

	// DiffSnapshotInputFormatI18n captures enum value "i18n"
	DiffSnapshotInputFormatI18n string = "i18n"

	// DiffSnapshotInputFormatTypescript captures enum value "typescript"
	DiffSnapshotInputFormatTypescript string = "typescript"
)

// prop value enum
func (m *DiffSnapshotInput) validateFormatEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, diffSnapshotInputTypeFormatPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DiffSnapshotInput) validateFormat(formats strfmt.Registry) error {
	if swag.IsZero(m.Format) { // not required
		return nil
	}

	// value enum
	if err := m.validateFormatEnum("format", "body", m.Format); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this diff snapshot input based on the context it is used
func (m *DiffSnapshotInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateA(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateB(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DiffSnapshotInput) contextValidateA(ctx context.Context, formats strfmt.Registry) error {

	if m.A != nil {
		if err := m.A.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("a")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("a")
			}
			return err
		}
	}

	return nil
}

func (m *DiffSnapshotInput) contextValidateB(ctx context.Context, formats strfmt.Registry) error {

	if m.B != nil {
		if err := m.B.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("b")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("b")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DiffSnapshotInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DiffSnapshotInput) UnmarshalBinary(b []byte) error {
	var res DiffSnapshotInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
