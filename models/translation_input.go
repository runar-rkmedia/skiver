// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TranslationInput translation input
//
// swagger:model TranslationInput
type TranslationInput struct {

	// aliases
	Aliases []string `json:"aliases"`

	// Used as a variation for the key
	Context string `json:"context,omitempty"`

	// Description for the key, its use and where the key is used.
	Description string `json:"description,omitempty"`

	// Final part of the identifiying key.
	// With the example-input, the complete generated key would be store.product.description
	// Example: description
	Key string `json:"key,omitempty"`

	// locale ID
	LocaleID string `json:"locale_id,omitempty"`

	// Can be a dot-separated path-like string
	// Example: store.products
	Prefix string `json:"prefix,omitempty"`

	// project ID
	ProjectID string `json:"project,omitempty"`

	// tag
	Tag []string `json:"tags"`

	// Title with short description of the key
	Title string `json:"title,omitempty"`

	// The pre-interpolated value to use  with translations
	// Example: The {{productName}} fires up to {{count}} bullets of {{subject}}.
	Value string `json:"value,omitempty"`

	// Variables used within the translation.
	// This helps with giving translators more context,
	// The value for the translation will be used in examples.
	// Example: {"count":3,"productName":"X-Buster","subject":"compressed solar energy"}
	Variables map[string]interface{} `json:"variables,omitempty"`
}

// Validate validates this translation input
func (m *TranslationInput) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this translation input based on context it is used
func (m *TranslationInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TranslationInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TranslationInput) UnmarshalBinary(b []byte) error {
	var res TranslationInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
