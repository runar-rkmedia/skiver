// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Translations translations
//
// swagger:model Translations
type Translations struct {

	// aliases
	Aliases []string `json:"aliases"`

	// Used as a variation for the key
	Context string `json:"context,omitempty"`

	// Time of which the entity was created in the database
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"createdAt"`

	// User id refering to the user who created the item
	CreatedBy string `json:"createdBy,omitempty"`

	// If set, the item is considered deleted. The item will normally not get deleted from the database,
	// but it may if cleanup is required.
	// Format: date-time
	Deleted strfmt.DateTime `json:"deleted,omitempty"`

	// Description for the key, its use and where the key is used.
	Description string `json:"description,omitempty"`

	// Unique identifier of the entity
	// Required: true
	ID *string `json:"id"`

	// Final part of the identifiying key.
	// With the example-input, the complete generated key would be store.product.description
	// Example: description
	Key string `json:"key,omitempty"`

	// locale ID
	LocaleID string `json:"locale_id,omitempty"`

	// Can be a dot-separated path-like string
	// Example: store.products
	Prefix string `json:"prefix,omitempty"`

	// project ID
	ProjectID string `json:"project,omitempty"`

	// tag
	Tag []string `json:"tags"`

	// Title with short description of the key
	Title string `json:"title,omitempty"`

	// Time of which the entity was updated, if any
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updatedAt,omitempty"`

	// User id refering to who created the item
	UpdatedBy string `json:"updatedBy,omitempty"`

	// The pre-interpolated value to use  with translations
	// Example: The {{productName}} fires up to {{count}} bullets of {{subject}}.
	Value string `json:"value,omitempty"`

	// Variables used within the translation.
	// This helps with giving translators more context,
	// The value for the translation will be used in examples.
	// Example: {"count":3,"productName":"X-Buster","subject":"compressed solar energy"}
	Variables map[string]interface{} `json:"variables,omitempty"`
}

// Validate validates this translations
func (m *Translations) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeleted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Translations) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("createdAt", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Translations) validateDeleted(formats strfmt.Registry) error {
	if swag.IsZero(m.Deleted) { // not required
		return nil
	}

	if err := validate.FormatOf("deleted", "body", "date-time", m.Deleted.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Translations) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Translations) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this translations based on context it is used
func (m *Translations) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Translations) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Translations) UnmarshalBinary(b []byte) error {
	var res Translations
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
