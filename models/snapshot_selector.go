// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SnapshotSelector snapshot selector
//
// swagger:model snapshotSelector
type SnapshotSelector struct {

	// project id
	// Required: true
	// Max Length: 36
	ProjectID *string `json:"project_id"`

	// raw
	Raw interface{} `json:"raw,omitempty"`

	// tag
	// Max Length: 36
	Tag string `json:"tag,omitempty"`
}

// Validate validates this snapshot selector
func (m *SnapshotSelector) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTag(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapshotSelector) validateProjectID(formats strfmt.Registry) error {

	if err := validate.Required("project_id", "body", m.ProjectID); err != nil {
		return err
	}

	if err := validate.MaxLength("project_id", "body", *m.ProjectID, 36); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotSelector) validateTag(formats strfmt.Registry) error {
	if swag.IsZero(m.Tag) { // not required
		return nil
	}

	if err := validate.MaxLength("tag", "body", m.Tag, 36); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this snapshot selector based on context it is used
func (m *SnapshotSelector) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SnapshotSelector) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SnapshotSelector) UnmarshalBinary(b []byte) error {
	var res SnapshotSelector
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
