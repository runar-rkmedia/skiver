// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LocalePayload locale payload
//
// swagger:model LocalePayload
type LocalePayload struct {

	// List of other Locales in preferred order for fallbacks
	// Required: true
	// Max Length: 12
	// Min Length: 2
	IetfTag *string `json:"ietf_tag"`

	// iso639 1
	// Required: true
	// Max Length: 2
	// Min Length: 2
	Iso6391 *string `json:"iso639_1"`

	// iso639 2
	// Required: true
	// Max Length: 3
	// Min Length: 3
	Iso6392 *string `json:"iso639_2"`

	// iso639 3
	// Required: true
	// Max Length: 3
	// Min Length: 3
	Iso6393 *string `json:"iso639_3"`

	// title
	// Required: true
	// Max Length: 300
	// Min Length: 3
	Title *string `json:"title"`
}

// Validate validates this locale payload
func (m *LocalePayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIetfTag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIso6391(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIso6392(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIso6393(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LocalePayload) validateIetfTag(formats strfmt.Registry) error {

	if err := validate.Required("ietf_tag", "body", m.IetfTag); err != nil {
		return err
	}

	if err := validate.MinLength("ietf_tag", "body", *m.IetfTag, 2); err != nil {
		return err
	}

	if err := validate.MaxLength("ietf_tag", "body", *m.IetfTag, 12); err != nil {
		return err
	}

	return nil
}

func (m *LocalePayload) validateIso6391(formats strfmt.Registry) error {

	if err := validate.Required("iso639_1", "body", m.Iso6391); err != nil {
		return err
	}

	if err := validate.MinLength("iso639_1", "body", *m.Iso6391, 2); err != nil {
		return err
	}

	if err := validate.MaxLength("iso639_1", "body", *m.Iso6391, 2); err != nil {
		return err
	}

	return nil
}

func (m *LocalePayload) validateIso6392(formats strfmt.Registry) error {

	if err := validate.Required("iso639_2", "body", m.Iso6392); err != nil {
		return err
	}

	if err := validate.MinLength("iso639_2", "body", *m.Iso6392, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("iso639_2", "body", *m.Iso6392, 3); err != nil {
		return err
	}

	return nil
}

func (m *LocalePayload) validateIso6393(formats strfmt.Registry) error {

	if err := validate.Required("iso639_3", "body", m.Iso6393); err != nil {
		return err
	}

	if err := validate.MinLength("iso639_3", "body", *m.Iso6393, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("iso639_3", "body", *m.Iso6393, 3); err != nil {
		return err
	}

	return nil
}

func (m *LocalePayload) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	if err := validate.MinLength("title", "body", *m.Title, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("title", "body", *m.Title, 300); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this locale payload based on context it is used
func (m *LocalePayload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *LocalePayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LocalePayload) UnmarshalBinary(b []byte) error {
	var res LocalePayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
