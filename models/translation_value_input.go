// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TranslationValueInput translation value input
//
// swagger:model TranslationValueInput
type TranslationValueInput struct {

	// context
	Context map[string]string `json:"context,omitempty"`

	// locale id
	// Required: true
	// Max Length: 100
	// Min Length: 1
	LocaleID *string `json:"locale_id"`

	// translation id
	// Required: true
	// Max Length: 100
	// Min Length: 1
	TranslationID *string `json:"translation_id"`

	// value
	// Required: true
	// Max Length: 8000
	// Min Length: 0
	Value *string `json:"value"`

}

// Validate validates this translation value input
func (m *TranslationValueInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLocaleID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTranslationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TranslationValueInput) validateLocaleID(formats strfmt.Registry) error {

	if err := validate.Required("locale_id", "body", m.LocaleID); err != nil {
		return err
	}

	if err := validate.MinLength("locale_id", "body", *m.LocaleID, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("locale_id", "body", *m.LocaleID, 100); err != nil {
		return err
	}

	return nil
}

func (m *TranslationValueInput) validateTranslationID(formats strfmt.Registry) error {

	if err := validate.Required("translation_id", "body", m.TranslationID); err != nil {
		return err
	}

	if err := validate.MinLength("translation_id", "body", *m.TranslationID, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("translation_id", "body", *m.TranslationID, 100); err != nil {
		return err
	}

	return nil
}

func (m *TranslationValueInput) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	if err := validate.MinLength("value", "body", *m.Value, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("value", "body", *m.Value, 8000); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this translation value input based on context it is used
func (m *TranslationValueInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TranslationValueInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TranslationValueInput) UnmarshalBinary(b []byte) error {
	var res TranslationValueInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
