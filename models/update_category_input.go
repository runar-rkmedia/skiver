// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateCategoryInput update category input
//
// swagger:model UpdateCategoryInput
type UpdateCategoryInput struct {

	// description
	// Max Length: 8000
	// Min Length: 3
	Description string `json:"description,omitempty"`

	// id
	// Max Length: 100
	// Min Length: 1
	ID string `json:"id,omitempty"`

	// key
	// Max Length: 100
	// Min Length: 1
	// Pattern: ^[^\s]*$
	Key string `json:"key,omitempty"`

	// project id
	// Max Length: 100
	// Min Length: 1
	ProjectID string `json:"project_id,omitempty"`

	// title
	// Max Length: 400
	// Min Length: 3
	Title string `json:"title,omitempty"`
}

// Validate validates this update category input
func (m *UpdateCategoryInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateCategoryInput) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MinLength("description", "body", m.Description, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("description", "body", m.Description, 8000); err != nil {
		return err
	}

	return nil
}

func (m *UpdateCategoryInput) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.MinLength("id", "body", m.ID, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("id", "body", m.ID, 100); err != nil {
		return err
	}

	return nil
}

func (m *UpdateCategoryInput) validateKey(formats strfmt.Registry) error {
	if swag.IsZero(m.Key) { // not required
		return nil
	}

	if err := validate.MinLength("key", "body", m.Key, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("key", "body", m.Key, 100); err != nil {
		return err
	}

	if err := validate.Pattern("key", "body", m.Key, `^[^\s]*$`); err != nil {
		return err
	}

	return nil
}

func (m *UpdateCategoryInput) validateProjectID(formats strfmt.Registry) error {
	if swag.IsZero(m.ProjectID) { // not required
		return nil
	}

	if err := validate.MinLength("project_id", "body", m.ProjectID, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("project_id", "body", m.ProjectID, 100); err != nil {
		return err
	}

	return nil
}

func (m *UpdateCategoryInput) validateTitle(formats strfmt.Registry) error {
	if swag.IsZero(m.Title) { // not required
		return nil
	}

	if err := validate.MinLength("title", "body", m.Title, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("title", "body", m.Title, 400); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update category input based on context it is used
func (m *UpdateCategoryInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpdateCategoryInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateCategoryInput) UnmarshalBinary(b []byte) error {
	var res UpdateCategoryInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
