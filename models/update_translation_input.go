// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateTranslationInput update translation input
//
// swagger:model UpdateTranslationInput
type UpdateTranslationInput struct {

	// description
	// Max Length: 8000
	// Min Length: 0
	Description *string `json:"description,omitempty"`

	// id
	// Required: true
	// Max Length: 36
	// Min Length: 3
	ID *string `json:"id"`

	// title
	// Max Length: 300
	// Min Length: 0
	Title *string `json:"title,omitempty"`

	// variables
	Variables interface{} `json:"variables,omitempty"`
}

// Validate validates this update translation input
func (m *UpdateTranslationInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateTranslationInput) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MinLength("description", "body", *m.Description, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("description", "body", *m.Description, 8000); err != nil {
		return err
	}

	return nil
}

func (m *UpdateTranslationInput) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.MinLength("id", "body", *m.ID, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("id", "body", *m.ID, 36); err != nil {
		return err
	}

	return nil
}

func (m *UpdateTranslationInput) validateTitle(formats strfmt.Registry) error {
	if swag.IsZero(m.Title) { // not required
		return nil
	}

	if err := validate.MinLength("title", "body", *m.Title, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("title", "body", *m.Title, 300); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update translation input based on context it is used
func (m *UpdateTranslationInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpdateTranslationInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateTranslationInput) UnmarshalBinary(b []byte) error {
	var res UpdateTranslationInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
