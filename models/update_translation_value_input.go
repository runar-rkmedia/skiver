// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateTranslationValueInput update translation value input
//
// swagger:model UpdateTranslationValueInput
type UpdateTranslationValueInput struct {

	// If set, it will add/update the context for that key instead of the original value
	// Max Length: 100
	// Min Length: 1
	// Pattern: ^[^\s]*$
	ContextKey string `json:"context_key,omitempty"`

	// id
	// Required: true
	// Max Length: 36
	// Min Length: 3
	ID *string `json:"id"`

	// value
	// Max Length: 8000
	// Min Length: 0
	Value *string `json:"value,omitempty"`
}

// Validate validates this update translation value input
func (m *UpdateTranslationValueInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContextKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateTranslationValueInput) validateContextKey(formats strfmt.Registry) error {
	if swag.IsZero(m.ContextKey) { // not required
		return nil
	}

	if err := validate.MinLength("context_key", "body", m.ContextKey, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("context_key", "body", m.ContextKey, 100); err != nil {
		return err
	}

	if err := validate.Pattern("context_key", "body", m.ContextKey, `^[^\s]*$`); err != nil {
		return err
	}

	return nil
}

func (m *UpdateTranslationValueInput) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.MinLength("id", "body", *m.ID, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("id", "body", *m.ID, 36); err != nil {
		return err
	}

	return nil
}

func (m *UpdateTranslationValueInput) validateValue(formats strfmt.Registry) error {
	if swag.IsZero(m.Value) { // not required
		return nil
	}

	if err := validate.MinLength("value", "body", *m.Value, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("value", "body", *m.Value, 8000); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update translation value input based on context it is used
func (m *UpdateTranslationValueInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpdateTranslationValueInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateTranslationValueInput) UnmarshalBinary(b []byte) error {
	var res UpdateTranslationValueInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
