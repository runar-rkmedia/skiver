// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateSnapshotInput create snapshot input
//
// swagger:model CreateSnapshotInput
type CreateSnapshotInput struct {

	// description
	// Max Length: 300
	// Min Length: 3
	Description string `json:"description,omitempty"`

	// project id
	// Required: true
	// Max Length: 36
	// Min Length: 3
	ProjectID *string `json:"project_id"`

	// tag
	// Required: true
	// Max Length: 36
	// Min Length: 3
	// Pattern: ^[a-zA-Z0-9-_.]{3,36}$
	Tag *string `json:"tag"`
}

// Validate validates this create snapshot input
func (m *CreateSnapshotInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTag(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateSnapshotInput) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MinLength("description", "body", m.Description, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("description", "body", m.Description, 300); err != nil {
		return err
	}

	return nil
}

func (m *CreateSnapshotInput) validateProjectID(formats strfmt.Registry) error {

	if err := validate.Required("project_id", "body", m.ProjectID); err != nil {
		return err
	}

	if err := validate.MinLength("project_id", "body", *m.ProjectID, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("project_id", "body", *m.ProjectID, 36); err != nil {
		return err
	}

	return nil
}

func (m *CreateSnapshotInput) validateTag(formats strfmt.Registry) error {

	if err := validate.Required("tag", "body", m.Tag); err != nil {
		return err
	}

	if err := validate.MinLength("tag", "body", *m.Tag, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("tag", "body", *m.Tag, 36); err != nil {
		return err
	}

	if err := validate.Pattern("tag", "body", *m.Tag, `^[a-zA-Z0-9-_.]{3,36}$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create snapshot input based on context it is used
func (m *CreateSnapshotInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateSnapshotInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateSnapshotInput) UnmarshalBinary(b []byte) error {
	var res CreateSnapshotInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
