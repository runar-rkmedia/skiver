// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExtendedProject extended project
//
// swagger:model ExtendedProject
type ExtendedProject struct {

	// categories
	Categories map[string]ExtendedCategory `json:"categories,omitempty"`

	// category i ds
	CategoryIDs []string `json:"category_ids"`

	// Time of which the entity was created in the database
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"created_at"`

	// User id refering to the user who created the item
	CreatedBy string `json:"created_by,omitempty"`

	// If set, the item is considered deleted. The item will normally not get deleted from the database,
	// but it may if cleanup is required.
	// Format: date-time
	Deleted strfmt.DateTime `json:"deleted,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// exists
	Exists bool `json:"exists,omitempty"`

	// Unique identifier of the entity
	// Required: true
	ID *string `json:"id"`

	// included tags
	IncludedTags []string `json:"included_tags"`

	// locales
	Locales map[string]Locale `json:"locales,omitempty"`

	// short name
	ShortName string `json:"short_name,omitempty"`

	// snapshots
	Snapshots map[string]ProjectSnapshotMeta `json:"snapshots,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// Time of which the entity was updated, if any
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`

	// User id refering to who created the item
	UpdatedBy string `json:"updated_by,omitempty"`

	// category tree
	CategoryTree *CategoryTreeNode `json:"category_tree,omitempty"`
}

// Validate validates this extended project
func (m *ExtendedProject) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategories(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeleted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocales(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnapshots(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCategoryTree(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExtendedProject) validateCategories(formats strfmt.Registry) error {
	if swag.IsZero(m.Categories) { // not required
		return nil
	}

	for k := range m.Categories {

		if err := validate.Required("categories"+"."+k, "body", m.Categories[k]); err != nil {
			return err
		}
		if val, ok := m.Categories[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("categories" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("categories" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExtendedProject) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ExtendedProject) validateDeleted(formats strfmt.Registry) error {
	if swag.IsZero(m.Deleted) { // not required
		return nil
	}

	if err := validate.FormatOf("deleted", "body", "date-time", m.Deleted.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ExtendedProject) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ExtendedProject) validateLocales(formats strfmt.Registry) error {
	if swag.IsZero(m.Locales) { // not required
		return nil
	}

	for k := range m.Locales {

		if err := validate.Required("locales"+"."+k, "body", m.Locales[k]); err != nil {
			return err
		}
		if val, ok := m.Locales[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("locales" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("locales" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExtendedProject) validateSnapshots(formats strfmt.Registry) error {
	if swag.IsZero(m.Snapshots) { // not required
		return nil
	}

	for k := range m.Snapshots {

		if err := validate.Required("snapshots"+"."+k, "body", m.Snapshots[k]); err != nil {
			return err
		}
		if val, ok := m.Snapshots[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("snapshots" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("snapshots" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExtendedProject) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ExtendedProject) validateCategoryTree(formats strfmt.Registry) error {
	if swag.IsZero(m.CategoryTree) { // not required
		return nil
	}

	if m.CategoryTree != nil {
		if err := m.CategoryTree.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("category_tree")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("category_tree")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this extended project based on the context it is used
func (m *ExtendedProject) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCategories(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLocales(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSnapshots(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCategoryTree(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExtendedProject) contextValidateCategories(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Categories {

		if val, ok := m.Categories[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *ExtendedProject) contextValidateLocales(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Locales {

		if val, ok := m.Locales[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *ExtendedProject) contextValidateSnapshots(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Snapshots {

		if val, ok := m.Snapshots[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *ExtendedProject) contextValidateCategoryTree(ctx context.Context, formats strfmt.Registry) error {

	if m.CategoryTree != nil {
		if err := m.CategoryTree.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("category_tree")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("category_tree")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExtendedProject) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExtendedProject) UnmarshalBinary(b []byte) error {
	var res ExtendedProject
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
