// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DiffResponse diff response
//
// swagger:model DiffResponse
type DiffResponse struct {

	// a
	A *ItemStats `json:"a,omitempty"`

	// b
	B *ItemStats `json:"b,omitempty"`

	// diff
	Diff Changelog `json:"diff,omitempty"`
}

// Validate validates this diff response
func (m *DiffResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateA(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateB(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiff(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DiffResponse) validateA(formats strfmt.Registry) error {
	if swag.IsZero(m.A) { // not required
		return nil
	}

	if m.A != nil {
		if err := m.A.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("a")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("a")
			}
			return err
		}
	}

	return nil
}

func (m *DiffResponse) validateB(formats strfmt.Registry) error {
	if swag.IsZero(m.B) { // not required
		return nil
	}

	if m.B != nil {
		if err := m.B.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("b")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("b")
			}
			return err
		}
	}

	return nil
}

func (m *DiffResponse) validateDiff(formats strfmt.Registry) error {
	if swag.IsZero(m.Diff) { // not required
		return nil
	}

	if err := m.Diff.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("diff")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("diff")
		}
		return err
	}

	return nil
}

// ContextValidate validate this diff response based on the context it is used
func (m *DiffResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateA(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateB(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDiff(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DiffResponse) contextValidateA(ctx context.Context, formats strfmt.Registry) error {

	if m.A != nil {
		if err := m.A.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("a")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("a")
			}
			return err
		}
	}

	return nil
}

func (m *DiffResponse) contextValidateB(ctx context.Context, formats strfmt.Registry) error {

	if m.B != nil {
		if err := m.B.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("b")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("b")
			}
			return err
		}
	}

	return nil
}

func (m *DiffResponse) contextValidateDiff(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Diff.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("diff")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("diff")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DiffResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DiffResponse) UnmarshalBinary(b []byte) error {
	var res DiffResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
